// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client"
  previewFeatures = ["relationJoins"]
  engineType      = "client"
  output          = "../src/generated/prisma"
  moduleFormat    = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid())
  spotifyUri        String           @unique
  spotifyId         String           @unique
  displayName       String?
  imageUrl          String?
  playlists         Playlist[]
  listeningHistory  ListeningEvent[]
  trackingStartTime DateTime         @default(now())
  accessToken       String           @unique
  refreshToken      String           @unique
}

model Playlist {
  id                Int             @id @default(autoincrement())
  name              String
  coverUrl          String?
  spotifyId         String          @unique
  spotifyUri        String          @unique
  spotifySnapshotId String
  syncEnabled       Boolean         @default(false)
  syncCompleted     Boolean         @default(false)
  owner             User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String
  tracks            PlaylistTrack[]
}

model Album {
  id         Int     @id @default(autoincrement())
  spotifyUri String  @unique
  name       String
  coverUrl   String?
  tracks     Track[]
  artist     Artist  @relation(fields: [artistId], references: [id])
  artistId   Int
}

model Artist {
  id         Int     @id @default(autoincrement())
  spotifyUri String  @unique
  name       String
  // imageUrl   String?
  tracks     Track[]
  albums     Album[]
}

model Track {
  id             Int             @id @default(autoincrement())
  spotifyUri     String          @unique
  name           String
  artist         Artist          @relation(fields: [artistId], references: [id])
  artistId       Int
  album          Album           @relation(fields: [albumId], references: [id])
  albumId        Int
  playlistTracks PlaylistTrack[]
}

model PlaylistTrack {
  playlist            Playlist         @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId          Int
  track               Track            @relation(fields: [trackId], references: [id])
  trackId             Int
  playlistPosition    Int
  currentlyOnPlaylist Boolean          @default(true)
  addedToPlaylistTime DateTime?
  trackingStartTime   DateTime         @default(now())
  trackingStopTime    DateTime?
  listeningEvents     ListeningEvent[]
  // @@unique([playlistId, playlistPosition])

  @@id([playlistId, trackId])
}

model ListeningEvent {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  playlistId    Int
  trackId       Int
  playlistTrack PlaylistTrack @relation(fields: [playlistId, trackId], references: [playlistId, trackId], onDelete: Cascade)

  playedAt DateTime
  // wasShuffle Boolean

  @@unique([playlistId, trackId, playedAt])
  @@index([userId, playedAt])
  @@index([playlistId, trackId])
}
